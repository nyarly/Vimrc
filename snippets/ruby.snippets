#Enummerable
snippet collect
	collect do |${1:item}|
		${2}
	end
snippet detect
	detect do |${1:item}|
		${2}
	end
snippet map
	map do |${1:item}|
		${2}
	end
snippet m
	map {|${1:item}| ${2}}
snippet find
	find do |${1:item}|
		${2}
	end
snippet find_all
	find_all do |${1:item}|
		${2}
	end
snippet each
	each do |${1:item}|
		${2}
	end
snippet each_slice
	each_slice(${1:2}) do |${1:array}|
		${2}
	end
snippet each_cons
	each_cons(${1:2}) do |${1:array}|
		${2}
	end
snippet each_with_index
	each_with_index do |${1:item}, ${2:index}|
		${3}
	end
snippet inject
	inject${1} do |${2:memo}, ${3:item}|
		${4}
	end

snippet dbg
	require 'ruby-debug'; debugger

#RSpec
snippet desc describe Classname
	describe ${1:`substitute(substitute(Filename(),'_spec$','',''), '\v%(^|_)(.)', '\u\1', 'g')`} do
		${2}
	end
snippet desc describe "some other thing"
	describe "${1}" do
		${2}
	end
snippet desc describe Classname, "special case"
	describe ${1:`substitute(substitute(Filename(),'_spec$','',''), '\v%(^|_)(.)', '\u\1', 'g')`}, "${2}" do
		${3}
	end
snippet desc"
	describe "${1}" do
		${2}
	end
snippet descc
	describe ${1:`substitute(substitute(Filename(),'_spec$','',''), '\v%(^|_)(.)', '\u\1', 'g')`} do
		${2}
	end
snippet descc"
	describe ${1:`substitute(substitute(Filename(),'_spec$','',''), '\v%(^|_)(.)', '\u\1', 'g')`}, "${2}" do
		${3}
	end
snippet bef
	before :each do
		${1}
	end
snippet befa
	before :all do
		${1}
	end
snippet af
	after :each do
		${1}
	end
snippet afa
	after :all do
		${1}
	end
snippet it
	it "should ${1}" do
		${2}
	end
snippet isbl
	it_should_behave_like "${1}"
snippet sh
	should 
snippet sn
	should_not 
snippet bn
	be_nil
#Exception handling
snippet beg
	begin
		${2}
	rescue ${1:Exception} => ex
		${3}
	end
